// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    directUrl         = env("DIRECT_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String?         @unique
    isAdmin       Boolean         @default(false)
    isVerified    Boolean         @default(false)
    emailVerified DateTime?
    image         String?
    phone         String?
    accounts      Account[]
    sessions      Session[]
    Image         Image[]
    questionnaire Questionnaire[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Image {
    id          String  @id @default(cuid())
    key         String  @db.Text
    name        String
    url         String  @db.Text
    foodId      String?
    createdBy   User    @relation(fields: [createdById], references: [id])
    createdById String

    @@index([createdById])
}

model Questionnaire {
    id                        String                     @id @default(cuid())
    questionnaireType         QuestionnaireType          @relation(fields: [questionnaireTypeId], references: [id])
    enterpriseIdentification  EnterpriseIdentification   @relation(fields: [enterpriseIdentificationId], references: [id])
    enterpriseCharacteristics EnterpriseCharacteristics? @relation(fields: [enterpriseCharacteristicsId], references: [id])
    receipt                   Receipt?                   @relation(fields: [receiptId], references: [id])
    createdBy                 User                       @relation(fields: [userId], references: [id])
    createdAt                 DateTime                   @default(now())
    updatedAt                 DateTime                   @updatedAt

    enterpriseCharacteristicsId String?
    enterpriseIdentificationId  String
    userId                      String
    questionnaireTypeId         String

    receiptId    String?
    employment   Employment? @relation(fields: [employmentId], references: [id])
    employmentId String?
}

model EnterpriseIdentification {
    id                        String          @id @default(cuid())
    name                      String
    businessAddress           String
    businessLicenseHolderName String
    brn                       String
    vatRegistrationNumber     String?
    telNo                     String[]
    faxNo                     Int?
    email                     String
    questionnaire             Questionnaire[]
}

model EnterpriseCharacteristics {
    id                            String          @id @default(cuid())
    mainActivity                  String
    secondaryActivities           String[]
    typeOfLegalOrganisation       String
    equityParticipation           String
    foreignPercentage             Int?
    nationalityOfForeignOwnerShip Int?
    questionnaire                 Questionnaire[]
}

model Receipt {
    id            String              @id @default(cuid())
    receiptData   ReceiptOptionData[]
    questionnaire Questionnaire[]
}

model ReceiptOptionData {
    id            String        @id @default(cuid())
    receiptOption ReceiptOption @relation(fields: [receiptOptionId], references: [id])
    amount        Float[]

    receiptOptionId String
    Receipt         Receipt? @relation(fields: [receiptId], references: [id])
    receiptId       String?
}

model QuestionnaireType {
    id                                   String          @id
    title                                String
    explanatoryNotes                     String          @default("") @db.Text
    showEnterpriseIdentification         Boolean         @default(true)
    showEnterpriseCharacteristics        Boolean         @default(true)
    showEmployment                       Boolean         @default(false)
    showReceipts                         Boolean         @default(false)
    showExpenditures                     Boolean         @default(false)
    showInventories                      Boolean         @default(false)
    showCapitalAssets                    Boolean         @default(false)
    showOwnAccountResearchAndDevelopment Boolean         @default(false)
    showContactDetails                   Boolean         @default(false)
    questionnaire                        Questionnaire[]
    ReceiptOption                        ReceiptOption?  @relation(fields: [receiptOptionId], references: [id])
    receiptOptionId                      String?
}

model ReceiptOption {
    id                String              @id @default(cuid())
    showFor           QuestionnaireType[]
    title             String
    ReceiptOptionData ReceiptOptionData[]
}

model Employment {
    id            String                @id @default(cuid())
    employed      EmploymentParameter[]
    questionnaire Questionnaire[]
}

model EmploymentParameter {
    id           String      @id @default(cuid())
    number       Int
    description  String
    nationality  String
    gender       String
    Employment   Employment? @relation(fields: [employmentId], references: [id])
    employmentId String?
}
